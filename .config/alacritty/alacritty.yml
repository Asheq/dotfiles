# Configuration for Alacritty, the GPU enhanced terminal emulator


# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # Falls back to size specified by window manager if set to 0x0.
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: true

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
#
# Important font attributes like antialiasing, subpixel aa, and hinting can be
# controlled through fontconfig. Specifically, the following attributes should
# have an effect:
#
# * hintstyle
# * antialias
# * lcdfilter
# * rgba
#
# For instance, if you wish to disable subpixel antialiasing, you might set the
# rgba property to "none". If you wish to completely disable antialiasing, you
# can set antialias to false.
#
# Please see these resources for more information on how to use fontconfig
#
# * https://wiki.archlinux.org/index.php/font_configuration#Fontconfig_configuration
# * file:///usr/share/doc/fontconfig/fontconfig-user.html
font:
  # The normal (roman) font face to use.
  normal:
    family: Monaco # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: Monaco # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Bold

  # The italic font face
  italic:
    family: Monaco # should be "Menlo" or something on macOS.
    # Style can be specified to pick a specific face.
    # style: Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: true

# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary:
    background: '0x282828'
    foreground: '0xeeeeee'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x000000'
    cursor: '0x00ffff'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xd54e53'
    green:   '0xb9ca4a'
    yellow:  '0xe6c547'
    blue:    '0x7aa6da'
    magenta: '0xc397d8'
    cyan:    '0x70c0ba'
    white:   '0xffffff'

  # Bright colors
  bright:
    black:   '0x666666'
    red:     '0xff3334'
    green:   '0x9ec400'
    yellow:  '0xe7c547'
    blue:    '0x7aa6da'
    magenta: '0xb77ee0'
    cyan:    '0x54ced6'
    white:   '0xffffff'

  # Dim colors (Optional)
  # dim:
  #   black:   '0x333333'
  #   red:     '0xf2777a'
  #   green:   '0x99cc99'
  #   yellow:  '0xffcc66'
  #   blue:    '0x6699cc'
  #   magenta: '0xcc99cc'
  #   cyan:    '0x66cccc'
  #   white:   '0xdddddd'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  faux_scrollback_lines: 1

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

dynamic_title: true

hide_cursor_when_typing: false

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor_style: Block

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /bin/bash
  args:
    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
#
# Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
# (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
# then run `showkey -a` to get the sequence associated to a key combination.
key_bindings:

    ################## Alphabetic keys ##################

    # Unmodified
    # NOTE: mapped by default

    # Shift
    # NOTE: mapped by default

    # Command
  - { key: A, mods: Command, chars: "" }
  - { key: B, mods: Command, chars: "" }
  - { key: C, mods: Command, action: Copy }
  - { key: D, mods: Command, chars: "" }
  - { key: E, mods: Command, chars: "" }
  - { key: F, mods: Command, chars: "" }
  - { key: G, mods: Command, chars: "" }
  - { key: H, mods: Command, chars: "" }
  - { key: I, mods: Command, chars: "" }
  - { key: J, mods: Command, chars: "" }
  - { key: K, mods: Command, chars: "" }
  - { key: L, mods: Command, chars: "" }
  - { key: M, mods: Command, chars: "" }
  - { key: N, mods: Command, chars: "" }
  - { key: O, mods: Command, chars: "" }
  - { key: P, mods: Command, chars: "" }
  - { key: Q, mods: Command, action: Quit }
  - { key: R, mods: Command, chars: "" }
  - { key: S, mods: Command, chars: "" }
  - { key: T, mods: Command, chars: "" }
  - { key: U, mods: Command, chars: "" }
  - { key: V, mods: Command, action: Paste }
  - { key: W, mods: Command, action: Quit }
  - { key: X, mods: Command, chars: "" }
  - { key: Y, mods: Command, chars: "" }
  - { key: Z, mods: Command, chars: "" }

    # Alt
  - { key: A, mods: Alt, chars: "\x1ba" }
  - { key: B, mods: Alt, chars: "\x1bb" }
  - { key: C, mods: Alt, chars: "\x1bc" }
  - { key: D, mods: Alt, chars: "\x1bd" }
  - { key: E, mods: Alt, chars: "\x1be" }
  - { key: F, mods: Alt, chars: "\x1bf" }
  - { key: G, mods: Alt, chars: "\x1bg" }
  - { key: H, mods: Alt, chars: "\x1bh" }
  - { key: I, mods: Alt, chars: "\x1bi" }
  - { key: J, mods: Alt, chars: "\x1bj" }
  - { key: K, mods: Alt, chars: "\x1bk" }
  - { key: L, mods: Alt, chars: "\x1bl" }
  - { key: M, mods: Alt, chars: "\x1bm" }
  - { key: N, mods: Alt, chars: "\x1bn" }
  - { key: O, mods: Alt, chars: "\x1bo" }
  - { key: P, mods: Alt, chars: "\x1bp" }
  - { key: Q, mods: Alt, chars: "\x1bq" }
  - { key: R, mods: Alt, chars: "\x1br" }
  - { key: S, mods: Alt, chars: "\x1bs" }
  - { key: T, mods: Alt, chars: "\x1bt" }
  - { key: U, mods: Alt, chars: "\x1bu" }
  - { key: V, mods: Alt, chars: "\x1bv" }
  - { key: W, mods: Alt, chars: "\x1bw" }
  - { key: X, mods: Alt, chars: "\x1bx" }
  - { key: Y, mods: Alt, chars: "\x1by" }
  - { key: Z, mods: Alt, chars: "\x1bz" }

    # Alt + Shift
  - { key: A, mods: Alt|Shift, chars: "\x1bA" }
  - { key: B, mods: Alt|Shift, chars: "\x1bB" }
  - { key: C, mods: Alt|Shift, chars: "\x1bC" }
  - { key: D, mods: Alt|Shift, chars: "\x1bD" }
  - { key: E, mods: Alt|Shift, chars: "\x1bE" }
  - { key: F, mods: Alt|Shift, chars: "\x1bF" }
  - { key: G, mods: Alt|Shift, chars: "\x1bG" }
  - { key: H, mods: Alt|Shift, chars: "\x1bH" }
  - { key: I, mods: Alt|Shift, chars: "\x1bI" }
  - { key: J, mods: Alt|Shift, chars: "\x1bJ" }
  - { key: K, mods: Alt|Shift, chars: "\x1bK" }
  - { key: L, mods: Alt|Shift, chars: "\x1bL" }
  - { key: M, mods: Alt|Shift, chars: "\x1bM" }
  - { key: N, mods: Alt|Shift, chars: "\x1bN" }
  - { key: O, mods: Alt|Shift, chars: "\x1bO" }
  - { key: P, mods: Alt|Shift, chars: "\x1bP" }
  - { key: Q, mods: Alt|Shift, chars: "\x1bQ" }
  - { key: R, mods: Alt|Shift, chars: "\x1bR" }
  - { key: S, mods: Alt|Shift, chars: "\x1bS" }
  - { key: T, mods: Alt|Shift, chars: "\x1bT" }
  - { key: U, mods: Alt|Shift, chars: "\x1bU" }
  - { key: V, mods: Alt|Shift, chars: "\x1bV" }
  - { key: W, mods: Alt|Shift, chars: "\x1bW" }
  - { key: X, mods: Alt|Shift, chars: "\x1bX" }
  - { key: Y, mods: Alt|Shift, chars: "\x1bY" }
  - { key: Z, mods: Alt|Shift, chars: "\x1bZ" }

    # Control
  - { key: A, mods: Control, chars: "\x01" }
  - { key: B, mods: Control, chars: "\x02" }
  - { key: C, mods: Control, chars: "\x03" }
  - { key: D, mods: Control, chars: "\x04" }
  - { key: E, mods: Control, chars: "\x05" }
  - { key: F, mods: Control, chars: "\x06" }
  - { key: G, mods: Control, chars: "\x07" }
  - { key: H, mods: Control, chars: "\x08" }
  - { key: I, mods: Control, chars: "\x09" }
  - { key: J, mods: Control, chars: "\x0a" }
  - { key: K, mods: Control, chars: "\x0b" }
  - { key: L, mods: Control, chars: "\x0c" }
  - { key: M, mods: Control, chars: "\x0d" }
  - { key: N, mods: Control, chars: "\x0e" }
  - { key: O, mods: Control, chars: "\x0f" }
  - { key: P, mods: Control, chars: "\x10" }
  - { key: Q, mods: Control, chars: "\x11" }
  - { key: R, mods: Control, chars: "\x12" }
  - { key: S, mods: Control, chars: "\x13" }
  - { key: T, mods: Control, chars: "\x14" }
  - { key: U, mods: Control, chars: "\x15" }
  - { key: V, mods: Control, chars: "\x16" }
  - { key: W, mods: Control, chars: "\x17" }
  - { key: X, mods: Control, chars: "\x18" }
  - { key: Y, mods: Control, chars: "\x19" }
  - { key: Z, mods: Control, chars: "\x1a" }

  ################## Numeric keys ##################

  # Unmodified
  # NOTE: mapped by default

  # Shift
  # NOTE: mapped by default

  # Command

  # Alt
  - { key: Key0, mods: Alt, chars: "\x1b0" }
  - { key: Key1, mods: Alt, chars: "\x1b1" }
  - { key: Key2, mods: Alt, chars: "\x1b2" }
  - { key: Key3, mods: Alt, chars: "\x1b3" }
  - { key: Key4, mods: Alt, chars: "\x1b4" }
  - { key: Key5, mods: Alt, chars: "\x1b5" }
  - { key: Key6, mods: Alt, chars: "\x1b6" }
  - { key: Key7, mods: Alt, chars: "\x1b7" }
  - { key: Key8, mods: Alt, chars: "\x1b8" }
  - { key: Key9, mods: Alt, chars: "\x1b9" }

  # Alt + Shift
  - { key: Key3, mods: Alt|Shift, chars: "\x1b#" }
  - { key: Key8, mods: Alt|Shift, chars: "\x1b*" }

  # Control
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Key2, mods: Control, chars: "\x00" }
  - { key: Key6, mods: Control, chars: "\x1e" }

  ################## Arrow keys ##################

  # Unmodified
  - { key: Down,  chars: "\x1bOB", mode: AppCursor }
  - { key: Left,  chars: "\x1bOD", mode: AppCursor }
  - { key: Right, chars: "\x1bOC", mode: AppCursor }
  - { key: Up,    chars: "\x1bOA", mode: AppCursor }

  # Unmodified (Other)
  - { key: Down,  chars: "\x1b[B", mode: ~AppCursor }
  - { key: Left,  chars: "\x1b[D", mode: ~AppCursor }
  - { key: Right, chars: "\x1b[C", mode: ~AppCursor }
  - { key: Up,    chars: "\x1b[A", mode: ~AppCursor }

  # Shift
  - { key: Down,  mods: Shift, chars: "\x1b[1;2B" }
  - { key: Left,  mods: Shift, chars: "\x1b[1;2D" }
  - { key: Right, mods: Shift, chars: "\x1b[1;2C" }
  - { key: Up,    mods: Shift, chars: "\x1b[1;2A" }

  # Command

  # Alt
  - { key: Down,  mods: Alt, chars: "\x1b[1;3B" }
  - { key: Left,  mods: Alt, chars: "\x1b[1;3D" }
  - { key: Right, mods: Alt, chars: "\x1b[1;3C" }
  - { key: Up,    mods: Alt, chars: "\x1b[1;3A" }

  # Alt + Shift

  # Control
  - { key: Down,  mods: Control, chars: "\x1b[1;5B" }
  - { key: Left,  mods: Control, chars: "\x1b[1;5D" }
  - { key: Right, mods: Control, chars: "\x1b[1;5C" }
  - { key: Up,    mods: Control, chars: "\x1b[1;5A" }

  ################## Other primary keys ##################
  # Unmodified
  - { key: Back, chars: "\x7f" }

  # Shift
  - { key: Tab, mods: Shift, chars: "\x1b[Z" }

  # Command

  # Alt
  - { key: Back,   mods: Alt, chars: "\x1b\x7f" }
  - { key: Grave,  mods: Alt, chars: "\x1b`" }
  - { key: Period, mods: Alt, chars: "\x1b." }

  # Alt + Shift
  - { key: Comma,  mods: Alt|Shift, chars: "\x1b<" }
  - { key: Grave,  mods: Alt|Shift, chars: "\x1b~" }
  - { key: Period, mods: Alt|Shift, chars: "\x1b>" }

  # Control
  - { key: Equals,   mods: Control, action: IncreaseFontSize }
  - { key: LBracket, mods: Control, chars: "\x1b" }
  - { key: Minus,    mods: Control, action: DecreaseFontSize }
  - { key: RBracket, mods: Control, chars: "\x1d" }

  ################## Secondary keys ##################
  # Unmodified
  - { key: Delete,   chars: "\x1b[3~" }
  - { key: End,      chars: "\x1bOF", mode: AppCursor }
  - { key: End,      chars: "\x1b[F", mode: ~AppCursor }
  - { key: Home,     chars: "\x1bOH", mode: AppCursor }
  - { key: Home,     chars: "\x1b[H", mode: ~AppCursor }
  - { key: Insert,   chars: "\x1b[2~" }
  - { key: PageDown, chars: "\x1b[6~" }
  - { key: PageUp,   chars: "\x1b[5~" }

  # Shift
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~" }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~" }

  # Command

  # Alt

  # Alt + Shift

  # Control
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~" }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~" }

  ################## Function keys ##################
  # Unmodified
  - { key: F1,  chars: "\x1bOP" }
  - { key: F2,  chars: "\x1bOQ" }
  - { key: F3,  chars: "\x1bOR" }
  - { key: F4,  chars: "\x1bOS" }
  - { key: F5,  chars: "\x1b[15~" }
  - { key: F6,  chars: "\x1b[17~" }
  - { key: F7,  chars: "\x1b[18~" }
  - { key: F8,  chars: "\x1b[19~" }
  - { key: F9,  chars: "\x1b[20~" }
  - { key: F10, chars: "\x1b[21~" }
  - { key: F11, chars: "\x1b[23~" }
  - { key: F12, chars: "\x1b[24~" }

  # Shift
  - { key: F1,  mods: Shift, chars: "\x1b[1;2P" }
  - { key: F2,  mods: Shift, chars: "\x1b[1;2Q" }
  - { key: F3,  mods: Shift, chars: "\x1b[1;2R" }
  - { key: F4,  mods: Shift, chars: "\x1b[1;2S" }
  - { key: F5,  mods: Shift, chars: "\x1b[15;2~" }
  - { key: F6,  mods: Shift, chars: "\x1b[17;2~" }
  - { key: F7,  mods: Shift, chars: "\x1b[18;2~" }
  - { key: F8,  mods: Shift, chars: "\x1b[19;2~" }
  - { key: F9,  mods: Shift, chars: "\x1b[20;2~" }
  - { key: F10, mods: Shift, chars: "\x1b[21;2~" }
  - { key: F11, mods: Shift, chars: "\x1b[23;2~" }
  - { key: F12, mods: Shift, chars: "\x1b[24;2~" }

  # Command
  - { key: F1,  mods: Super, chars: "\x1b[1;3P" }
  - { key: F2,  mods: Super, chars: "\x1b[1;3Q" }
  - { key: F3,  mods: Super, chars: "\x1b[1;3R" }
  - { key: F4,  mods: Super, chars: "\x1b[1;3S" }
  - { key: F5,  mods: Super, chars: "\x1b[15;3~" }
  - { key: F6,  mods: Super, chars: "\x1b[17;3~" }
  - { key: F7,  mods: Super, chars: "\x1b[18;3~" }
  - { key: F8,  mods: Super, chars: "\x1b[19;3~" }
  - { key: F9,  mods: Super, chars: "\x1b[20;3~" }
  - { key: F10, mods: Super, chars: "\x1b[21;3~" }
  - { key: F11, mods: Super, chars: "\x1b[23;3~" }
  - { key: F12, mods: Super, chars: "\x1b[24;3~" }

  # Alt
  - { key: F1,  mods: Alt, chars: "\x1b[1;6P" }
  - { key: F2,  mods: Alt, chars: "\x1b[1;6Q" }
  - { key: F3,  mods: Alt, chars: "\x1b[1;6R" }
  - { key: F4,  mods: Alt, chars: "\x1b[1;6S" }
  - { key: F5,  mods: Alt, chars: "\x1b[15;6~" }
  - { key: F6,  mods: Alt, chars: "\x1b[17;6~" }
  - { key: F7,  mods: Alt, chars: "\x1b[18;6~" }
  - { key: F8,  mods: Alt, chars: "\x1b[19;6~" }
  - { key: F9,  mods: Alt, chars: "\x1b[20;6~" }
  - { key: F10, mods: Alt, chars: "\x1b[21;6~" }
  - { key: F11, mods: Alt, chars: "\x1b[23;6~" }
  - { key: F12, mods: Alt, chars: "\x1b[24;6~" }

  # Alt + Shift

  # Control
  - { key: F1,  mods: Control, chars: "\x1b[1;5P" }
  - { key: F2,  mods: Control, chars: "\x1b[1;5Q" }
  - { key: F3,  mods: Control, chars: "\x1b[1;5R" }
  - { key: F4,  mods: Control, chars: "\x1b[1;5S" }
  - { key: F5,  mods: Control, chars: "\x1b[15;5~" }
  - { key: F6,  mods: Control, chars: "\x1b[17;5~" }
  - { key: F7,  mods: Control, chars: "\x1b[18;5~" }
  - { key: F8,  mods: Control, chars: "\x1b[19;5~" }
  - { key: F9,  mods: Control, chars: "\x1b[20;5~" }
  - { key: F10, mods: Control, chars: "\x1b[21;5~" }
  - { key: F11, mods: Control, chars: "\x1b[23;5~" }
  - { key: F12, mods: Control, chars: "\x1b[24;5~" }
