# ------------------------------------------------------------------------------
# Color variables
# ------------------------------------------------------------------------------
# Using ANSI escape sequences
ANSI_RESET='\[\e[0m\]'
ANSI_BLACK_FG='\[\e[0;30m\]'
ANSI_RED_FG='\[\e[0;31m\]'
ANSI_GREEN_FG='\[\e[0;32m\]'
ANSI_YELLOW_FG='\[\e[0;33m\]'
ANSI_BLUE_FG='\[\e[0;34m\]'
ANSI_MAGENTA_FG='\[\e[0;35m\]'
ANSI_CYAN_FG='\[\e[0;36m\]'
ANSI_LIGHT_GRAY_FG='\[\e[0;37m\]'
ANSI_DEFAULT_FG='\[\e[0;39m\]'
ANSI_DEFAULT_FG_BOLD='\[\e[1;39m\]'

# Using tput
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

# ------------------------------------------------------------------------------
# Symbol variables
# TODO: Use capital letters?
# ------------------------------------------------------------------------------
if [ "${USE_FANCY_GLYPHS}" = "yes" ]; then
  symbols_branch=' '
  symbols_directory=' '
  symbols_exit_code_fail=' '
  symbols_exit_code_success=' '
  symbols_hostname=' '
  symbols_jobs=' '
  symbols_not_login_shell=' '
  symbols_user=' '
else
  symbols_branch='β'
  symbols_directory='Δ'
  symbols_exit_code_fail='✖'
  symbols_exit_code_success='✔'
  symbols_hostname='H'
  symbols_jobs='J'
  symbols_not_login_shell='NL'
  symbols_user='U'
fi

# ------------------------------------------------------------------------------
# __prompt_command
# ------------------------------------------------------------------------------
function __prompt_command() {
  local exit_code="$?"
  if [[ "${exit_code}" != 0 ]]; then
    exit_symbol="  ${ANSI_RED_FG}${symbols_exit_code_fail} ${exit_code}${ANSI_LIGHT_GRAY_FG}"
  else
    exit_symbol="  ${ANSI_GREEN_FG}${symbols_exit_code_success}${ANSI_LIGHT_GRAY_FG}"
  fi

  PS1="\n"
  PS1+="${ANSI_LIGHT_GRAY_FG}"
  PS1+="┌─ "
  PS1+='$(pwd_head)'
  PS1+="${ANSI_DEFAULT_FG}"
  PS1+='$(pwd_tail)'
  PS1+="${ANSI_LIGHT_GRAY_FG}"
  PS1+='$(git_flag)'
  PS1+='$(user_flag)'
  PS1+='$(hostname_flag)'
  PS1+='$(jobs_count_flag)'
  PS1+='$(is_not_login_shell_flag)'
  PS1+="${exit_symbol}"
  PS1+="\n"
  PS1+="${ANSI_LIGHT_GRAY_FG}"
  PS1+='└─ '
  PS1+="${ANSI_RESET}"
}

# ------------------------------------------------------------------------------
# __prompt_command helpers
# ------------------------------------------------------------------------------
function pwd_head() {
  local l_head
  if [[ "${PWD}" = '/' ]] || [[ "${PWD}" = "${HOME}" ]]; then
    l_head=''
  else
    l_head="${PWD%/*}"
    [[ "${l_head}" =~ ^"$HOME"(/|$) ]] && l_head="~${l_head#$HOME}"
    if [[ "${l_head}" = '/' ]]; then
      l_head="/"
    else
      l_head="${l_head}/"
    fi
  fi
  echo "${l_head}"
}

function pwd_tail() {
  local l_tail
  if [[ "${PWD}" = "${HOME}" ]]; then
    l_tail='~'
  elif [[ "${PWD}" = '/' ]]; then
    l_tail='/'
  else
    l_tail="${PWD##*/}"
  fi
  echo "${l_tail}"
}

GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWSTASHSTATE=true
GIT_PS1_SHOWUNTRACKEDFILES=true
GIT_PS1_SHOWUPSTREAM='verbose'
GIT_PS1_DESCRIBE_STYLE='branch'
function git_flag() {
  echo "  ${symbols_branch}$(__git_ps1)"
}

function user_flag() {
  if [[ "${USER}" != "${LOGNAME}" ]] ; then
    echo "  ${symbols_user} ${USER}"
  fi
}

function hostname_flag() {
  if [[ -n "${SSH_CONNECTION}" ]]; then
    echo "  ${symbols_hostname} ${HOSTNAME}"
  fi
}

function jobs_count_flag() {
  local count="$(\jobs | wc -l | sed 's/^ *\(\d*\)/\1/')"
  if [[ "${count}" -ne 0 ]] ; then
    flag+=$(repeat "${symbols_jobs}" "${count}")
    echo "  ${symbols_jobs} ${count}"
  fi
}

function is_not_login_shell_flag() {
  if ! shopt -q login_shell ; then
    echo "  ${symbols_not_login_shell}"
  fi
}

function shell_level_flag() {
  if [[ "${SHLVL}" -ne 0 ]] ; then
    local flag='['
    flag+=$(repeat "${symbols_shell_level}" "${SHLVL}")
    flag+='] '
    echo "${flag}"
  fi
}

function repeat() {
  local str=$1
  local num=$2
  if [[ "${num}" -ne 0 ]] ; then
    printf "${str}"'%.0s' $(seq 1 "${num}")
  fi
}

# ------------------------------------------------------------------------------
# Color tests
# ------------------------------------------------------------------------------
# Background values
# =================
#  40 - Black
#  41 - Red
#  42 - Green
#  43 - Yellow
#  44 - Blue
#  45 - Magenta
#  46 - Cyan
#  47 - Light gray
# 100 - Dark gray
# 101 - Light red
# 102 - Light green
# 103 - Light yellow
# 104 - Light blue
# 105 - Light magenta
# 106 - Light cyan
# 107 - White
#  49 - Default background color

# Foreground values
# =================
# 30 - Black
# 31 - Red
# 32 - Green
# 33 - Yellow
# 34 - Blue
# 35 - Magenta
# 36 - Cyan
# 37 - Light gray
# 90 - Dark gray
# 91 - Light red
# 92 - Light green
# 93 - Light yellow
# 94 - Light blue
# 95 - Light magenta
# 96 - Light cyan
# 97 - White
# 39 - Default foreground color

# Formatting values
# =================
## Set
## ---
# 1 - Bold/Bright
# 2 - Dim
# 3 - Italic
# 4 - Underline
# 5 - Blink (does not work in most terminal emulators)
# 6 - ???
# 7 - Reverse (invert the foreground and background colors)
# 8 - Hidden (useful for passwords)

## Reset
## -----
#  0 - Reset all attributes
# 21 - Reset bold/bright
# 22 - Reset dim
# 23 - Reset italic
# 24 - Reset underline
# 25 - Reset blink (does not work in most terminal emulators)
# 26 - Reset ???
# 27 - Reset reverse
# 28 - Reset hidden
function print_terminal_colors() {
  # Background
  for clbg in {40..47} {100..107} 49 ; do
    # Foreground
    for clfg in {30..37} {90..97} 39 ; do
      # Formatting
      for attr in {0..8} ; do
        # Print the result
        echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
      done
      echo # Newline
    done
  done
}

function print_terminal_colors_256() {
  for fgbg in 38 48 ; do # Foreground / Background
    for color in {0..255} ; do # Colors
      # Display the color
      printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
      # Display 6 colors per lines
      if [ $((($color + 1) % 6)) == 4 ] ; then
        echo # New line
      fi
    done
    echo # New line
  done
}

function truecolor_test() {
  awk -v term_cols="${width:-$(tput cols || echo 80)}" 'BEGIN{
      s="/\\";
      for (colnum = 0; colnum<term_cols; colnum++) {
          r = 255-(colnum*255/term_cols);
          g = (colnum*510/term_cols);
          b = (colnum*255/term_cols);
          if (g>255) g = 510-g;
          printf "\033[48;2;%d;%d;%dm", r,g,b;
          printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
          printf "%s\033[0m", substr(s,colnum%2+1,1);
      }
      printf "\n";
  }'
}

# ------------------------------------------------------------------------------
# printargs
# ------------------------------------------------------------------------------
function printargs() {
  local arg
  for arg in "$@"
  do
    echo "Argument: ${arg}"
  done
  echo "Count: $#"
}


# ------------------------------------------------------------------------------
# setproxy and unsetproxy
# ------------------------------------------------------------------------------
function setproxy() {
  local proxy_url=''
  local no_proxy_urls=''

  # Uppercase letters
  export {HTTP,HTTPS,FTP,ALL}_PROXY="${proxy_url}"
  export NO_PROXY="${no_proxy_urls}"

  # Lowercase letters
  export {http,https,ftp,all}_proxy="${proxy_url}"
  export no_proxy="${no_proxy_urls}"
}

function unsetproxy() {
  # Uppercase letters
  unset {HTTP,HTTPS,FTP,ALL}_PROXY
  unset NO_PROXY

  # Lowercase letters
  unset {http,https,ftp,all}_proxy
  unset no_proxy
}

# ------------------------------------------------------------------------------
# all_git_branches_normalized
# ------------------------------------------------------------------------------
all_git_branches_normalized() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD | sed "s/.* //") &&
    echo "$branches"
}
